import * as pmtiles from "pmtiles";
import * as maplibregl from "maplibre-gl";
import layers from "protomaps-themes-base";
import * as turf from '@turf/turf';


const protocol = new pmtiles.Protocol();
maplibregl.addProtocol("pmtiles", protocol.tile);

const myMap = new maplibregl.Map({
  container: "map", // container id
  style: {
    version: 8,
    glyphs: "https://cdn.protomaps.com/fonts/pbf/{fontstack}/{range}.pbf",
    sources: {
      protomaps: {
        type: "vector",
        url: `pmtiles://${location.protocol}//${location.host}${location.pathname}hmb.pmtiles`,
        attribution:
          '<a href="https://protomaps.com">Protomaps</a> ¬© <a href="https://openstreetmap.org">OpenStreetMap</a>',
      },
    },
    layers: layers("protomaps", "light"),
  },
  zoom: 12, // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∞—Å—à—Ç–∞–±–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
});

let stations = new Map();
let rssiData = new Map();
let deviceColors = new Map(); // –ú–∞–ø–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ü–≤–µ—Ç–æ–≤ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
let existingCircles = new Set(); // –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ —Å—Ç–∞–Ω—Ü–∏–π —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –æ–∫—Ä—É–∂–Ω–æ—Å—Ç—è–º–∏
let intersectionMarkers = new Map(); // –ú–∞–ø–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –º–∞—Ä–∫–µ—Ä–æ–≤ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è
let intersectionCircleSource = null; // –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª–∏–≥–æ–Ω–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è
let deviceCircles = new Map(); // –ú–∞–ø–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–∫—Ä—É–∂–Ω–æ—Å—Ç–µ–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
let stationCircles = new Map(); // –ú–∞–ø–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–∫—Ä—É–∂–Ω–æ—Å—Ç–µ–π –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç–∞–Ω—Ü–∏–∏
let deviceList = new Set(); // –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è deviceid
let checkboxStates = {}; // –û–±—ä–µ–∫—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —á–µ–∫–±–æ–∫—Å–æ–≤
// –°–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ–∫–±–æ–∫—Å–∞ "All"
let allCheckboxState = false; // false - –≤—ã–∫–ª—é—á–µ–Ω, true - –≤–∫–ª—é—á–µ–Ω
// –û–±—ä–µ–∫—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Å–ª–æ–µ–≤
const layerVisibilityStates = {};
const deviceFlags = {};
let itemVisibilityStates = {}; // –û–±—ä–µ–∫—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å–ø–∏—Å–∫–∞
let geomarkFeaturesGlobal = []; // –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è geomarkFeatures
const trackingStates = {}; // –û–±—ä–µ–∫—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç—Ä–µ–∫–∏–Ω–≥–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
let allServerData = [];

// –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ–ª–∏–≥–æ–Ω–∞
const polygonCoordinates = [
  [
    [48.723369118563255, 55.75619106229897], // –í–µ—Ä—à–∏–Ω–∞ 1
    [48.722813901297165, 55.7560564458412], // –í–µ—Ä—à–∏–Ω–∞ 2
    [48.723248419157585, 55.75558755341253], // –í–µ—Ä—à–∏–Ω–∞ 3
    [48.72345763146074, 55.75563595547364], // –í–µ—Ä—à–∏–Ω–∞ 4
    [48.723369118563255, 55.75619106229897], // –í–µ—Ä—à–∏–Ω–∞ 1 (–∑–∞–º—ã–∫–∞–µ–º –ø–æ–ª–∏–≥–æ–Ω)
  ],
];

// –°–æ–∑–¥–∞–µ–º –ø–æ–ª–∏–≥–æ–Ω —Å –ø–æ–º–æ—â—å—é Turf.js
const area = turf.polygon(polygonCoordinates);


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –¥–æ —Ç–æ—á–∫–∏ —Å –ø–æ–º–æ—â—å—é rssi
function calculateDistance(rssi) {
  const N = 2.6; // —Ñ–∞–∫—Ç–æ—Ä —Å—Ä–µ–¥—ã
  const measuredPower = -5; // —É—Ä–æ–≤–µ–Ω—å rssi –Ω–∞ –æ–¥–∏–Ω –º–µ—Ç—Ä 
  const distance = Math.pow(10, (measuredPower - rssi) / (10 * N)); // –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –º–µ—Ç—Ä–∞—Ö
  return distance;
}

function getDeviceColor(deviceid) {
  if (!deviceColors.has(deviceid)) {
    const color = `#${Math.floor(Math.random()*16777215).toString(16).padStart(6, '0')}`;
    deviceColors.set(deviceid, color);
  }
  return deviceColors.get(deviceid);
}

function updateTotalDevicesCount() {
  const totalCountElement = document.getElementById('total-count');
  if (totalCountElement) {
    totalCountElement.textContent = deviceList.size; // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
  }
}

function updateDeviceList() {
  const deviceListElement = document.getElementById('device-list');
  deviceListElement.innerHTML = ''; // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–∞ checkboxStates
  deviceList.forEach(deviceid => {
    if (!checkboxStates[deviceid]) {
      checkboxStates[deviceid] = false; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–∞–∫ false
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è trackingStates –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    if (!trackingStates[deviceid]) {
      trackingStates[deviceid] = false; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç—Ä–µ–∫–∏–Ω–≥–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–∞–∫ false
    }
  });

  // –î–æ–±–∞–≤–ª—è–µ–º —á–µ–∫–±–æ–∫—Å "All"
  const allCheckbox = document.createElement('input');
  allCheckbox.type = 'checkbox';
  allCheckbox.id = 'all-checkbox';
  allCheckbox.checked = allCheckboxState;
  allCheckbox.indeterminate = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ "—á–∞—Å—Ç–∏—á–Ω–æ –≤–∫–ª—é—á–µ–Ω"

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –¥–ª—è —á–µ–∫–±–æ–∫—Å–∞ "All"
  allCheckbox.addEventListener('change', () => {
    const visible = allCheckbox.checked;
    toggleAllDevicesVisibility(visible);
    updateAllCheckboxState(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ–∫–±–æ–∫—Å–∞ "All" —Å—Ä–∞–∑—É
  });

  const allLabel = document.createElement('label');
  allLabel.htmlFor = 'all-checkbox';
  allLabel.innerText = 'All';

  const allLi = document.createElement('li');
  allLi.id = 'all-checkbox-li'; // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞ "All"
  allLi.appendChild(allCheckbox);
  allLi.appendChild(allLabel);
  deviceListElement.appendChild(allLi);

  // –î–æ–±–∞–≤–ª—è–µ–º —á–µ–∫–±–æ–∫—Å—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
  deviceList.forEach(deviceid => {
    const li = document.createElement('li');
    const color = deviceColors.get(deviceid); // –ü–æ–ª—É—á–∞–µ–º —Ü–≤–µ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    const checkbox = document.createElement('input');
    checkbox.type = 'checkbox';
    checkbox.value = deviceid; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —á–µ–∫–±–æ–∫—Å–∞

    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ–∫–±–æ–∫—Å–∞ –∏–∑ –æ–±—ä–µ–∫—Ç–∞ checkboxStates
    checkbox.checked = checkboxStates[deviceid] !== false;

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –¥–ª—è —á–µ–∫–±–æ–∫—Å–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    checkbox.addEventListener('change', () => {
      toggleDeviceVisibility(deviceid, checkbox.checked);
      updateAllCheckboxState(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ–∫–±–æ–∫—Å–∞ "All"

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ–∫–±–æ–∫—Å–∞ –≤ –æ–±—ä–µ–∫—Ç–µ checkboxStates
      checkboxStates[deviceid] = checkbox.checked;
    });

    // –°–æ–∑–¥–∞–µ–º HTML-—Å—Ç—Ä–æ–∫—É –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    li.innerHTML = `
      <span style="color: ${color};">‚ñ†</span> Device ID: ${deviceid}
    `;
    li.appendChild(checkbox);

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É –≥–ª–∞–∑–∞ (üëÅ) –¥–ª—è —Ç—Ä–µ–∫–∏–Ω–≥–∞
    const eyeIcon = document.createElement('span');
    eyeIcon.className = 'eye-icon';
    eyeIcon.innerText = ' üëÅ';
    eyeIcon.style.cursor = 'pointer';
    eyeIcon.style.color = trackingStates[deviceid] ? 'red' : ''; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç –∏–∫–æ–Ω–∫–∏

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∏–∫–æ–Ω–∫–∏ –≥–ª–∞–∑–∞
    eyeIcon.addEventListener('click', () => {
      toggleTracking(deviceid);
    });

    li.appendChild(eyeIcon);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–æ–≤—ã–º
    if (deviceFlags[deviceid]) {
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–¥–ø–∏—Å—å "New!"
      const newLabel = document.createElement('span');
      newLabel.innerText = ' New!';
      newLabel.style.color = 'red';
      li.appendChild(newLabel); // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–¥–ø–∏—Å—å –≤ —ç–ª–µ–º–µ–Ω—Ç <li>

      // –£–¥–∞–ª—è–µ–º –Ω–∞–¥–ø–∏—Å—å "New!" —á–µ—Ä–µ–∑ 4 —Å–µ–∫—É–Ω–¥—ã
      setTimeout(() => {
        newLabel.classList.add('fade-out'); // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
        deviceFlags[deviceid] = false;
      }, 4000);
    }

    deviceListElement.appendChild(li); // –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç <li> –≤ —Å–ø–∏—Å–æ–∫
  });

  // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É "Total: " –≤ –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞
  const totalDevicesLi = document.createElement('li');
  totalDevicesLi.innerHTML = `Total: <span id="total-count">${deviceList.size}</span>`;
  deviceListElement.appendChild(totalDevicesLi);

  // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ–∫–±–æ–∫—Å–∞ "All" –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö —á–µ–∫–±–æ–∫—Å–æ–≤
  updateAllCheckboxState();
}

function updateAllCheckboxState() {
  const allCheckbox = document.getElementById('all-checkbox');
  if (!allCheckbox) return;

  const deviceCheckboxes = Array.from(document.querySelectorAll('#device-list input[type="checkbox"]:not(#all-checkbox)'));

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Å–µ—Ö —á–µ–∫–±–æ–∫—Å–æ–≤ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
  const allChecked = deviceCheckboxes.every(checkbox => checkbox.checked);
  const someChecked = deviceCheckboxes.some(checkbox => checkbox.checked);

  if (allChecked) {
    // –í—Å–µ —á–µ–∫–±–æ–∫—Å—ã –≤–∫–ª—é—á–µ–Ω—ã
    allCheckbox.checked = true;
    allCheckbox.indeterminate = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ "—á–∞—Å—Ç–∏—á–Ω–æ –≤–∫–ª—é—á–µ–Ω"
  } else if (someChecked) {
    // –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —á–µ–∫–±–æ–∫—Å—ã –≤–∫–ª—é—á–µ–Ω—ã
    allCheckbox.checked = true;
    allCheckbox.indeterminate = true; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ "—á–∞—Å—Ç–∏—á–Ω–æ –≤–∫–ª—é—á–µ–Ω"
  } else {
    // –í—Å–µ —á–µ–∫–±–æ–∫—Å—ã –≤—ã–∫–ª—é—á–µ–Ω—ã
    allCheckbox.checked = false;
    allCheckbox.indeterminate = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ "—á–∞—Å—Ç–∏—á–Ω–æ –≤–∫–ª—é—á–µ–Ω"
  }
}

function toggleDeviceVisibility(deviceid, visible) {
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –¥–ª—è –≤—Å–µ—Ö —Å–ª–æ–µ–≤ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
  const layerIds = Array.from(myMap.getStyle().layers)
    .filter(layer => layer.id.startsWith(`circles-layer-${deviceid}`))
    .map(layer => layer.id);

  layerIds.forEach(layerId => {
    myMap.setLayoutProperty(layerId, 'visibility', visible ? 'visible' : 'none');
    layerVisibilityStates[layerId] = visible;
  });

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ–∫–±–æ–∫—Å–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
  checkboxStates[deviceid] = visible;

  // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ–∫–±–æ–∫—Å–∞ "All"
  updateAllCheckboxState();
}

function toggleAllDevicesVisibility(visible) {
  deviceList.forEach(deviceid => {
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ–∫–±–æ–∫—Å–æ–≤ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    const checkbox = document.querySelector(`#device-list input[type="checkbox"][value="${deviceid}"]`);
    if (checkbox) {
      checkbox.checked = visible;
      toggleDeviceVisibility(deviceid, visible);
    }
  });

  // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ–∫–±–æ–∫—Å–∞ "All"
  const allCheckbox = document.getElementById('all-checkbox');
  if (allCheckbox) {
    allCheckbox.checked = visible;
    allCheckbox.indeterminate = false;
  }

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ–∫–±–æ–∫—Å–æ–≤ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
  deviceList.forEach(deviceid => {
    checkboxStates[deviceid] = visible;
  });

  // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ–∫–±–æ–∫—Å–∞ "All"
  allCheckboxState = visible;
}

function toggleTracking(deviceid) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω–æ –ª–∏ —É–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
  const isTrackingEnabled = trackingStates[deviceid];

  if (isTrackingEnabled) {
    // –ï—Å–ª–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —É–∂–µ –≤–∫–ª—é—á–µ–Ω–æ, –≤—ã–∫–ª—é—á–∞–µ–º –µ–≥–æ
    trackingStates[deviceid] = false;
    clearTracking(deviceid); // –£–¥–∞–ª—è–µ–º —Ç–æ—á–∫–∏ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
  } else {
    // –ï—Å–ª–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—ã–∫–ª—é—á–µ–Ω–æ, –≤–∫–ª—é—á–∞–µ–º –µ–≥–æ
    trackingStates[deviceid] = true;

    // –û—á–∏—â–∞–µ–º —Ç—Ä–µ–∫–∏ –¥–ª—è –≤—Å–µ—Ö –¥—Ä—É–≥–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    deviceList.forEach(otherDeviceId => {
      if (otherDeviceId !== deviceid && trackingStates[otherDeviceId]) {
        clearTracking(otherDeviceId);
        trackingStates[otherDeviceId] = false;
      }
    });

    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–æ—á–∫–∏ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    showTrackingHistory(allServerData, deviceid);
  }

  // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –≥–ª–∞–∑–∞
  updateEyeIconState();
}

function updateEyeIconState() {
  deviceList.forEach(deviceid => {
    const eyeIcon = document.querySelector(`#device-list li:has([value="${deviceid}"]) .eye-icon`);
    if (eyeIcon) {
      eyeIcon.style.color = trackingStates[deviceid] ? 'red' : '';
    }
  });
}

function formatTimestamp(timestamp) {
  // –£–¥–∞–ª—è–µ–º —á–∞—Å—Ç—å —Å—Ç—Ä–æ–∫–∏ —Å –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞–º–∏ –∏ –∑–∞–º–µ–Ω—è–µ–º 'T' –Ω–∞ –ø—Ä–æ–±–µ–ª
  return timestamp.replace('T', ' ').replace(/\.\d{3}Z$/, '');
}

function showTrackingHistory(allServerData, deviceid = null) {
  console.log("–î–∞–Ω–Ω—ã–µ, –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –≤ showTrackingHistory (allServerData):", allServerData);

  // –ï—Å–ª–∏ deviceid —É–∫–∞–∑–∞–Ω, —Ñ–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –¥–ª—è —ç—Ç–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
  const filteredFeatures = deviceid
    ? allServerData.filter(feature => {
        const featureDeviceId = feature.deviceid.toString(); // –ü—Ä–∏–≤–æ–¥–∏–º –∫ —Å—Ç—Ä–æ–∫–µ
        const match = featureDeviceId === deviceid.toString(); // –ü—Ä–∏–≤–æ–¥–∏–º –∫ —Å—Ç—Ä–æ–∫–µ
        if (!match) {
          console.log(`–ò—Å–∫–ª—é—á–µ–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å: deviceid=${feature.deviceid}, –æ–∂–∏–¥–∞–µ–º—ã–π deviceid=${deviceid}`);
        }
        return match;
      })
    : allServerData;

  console.log("–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:", filteredFeatures);

  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (timestamp)
  const groupedByTime = filteredFeatures.reduce((acc, feature) => {
    const timestamp = feature.timestamp; // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É
    if (!acc[timestamp]) {
      acc[timestamp] = [];
    }
    acc[timestamp].push(feature);
    return acc;
  }, {});

  console.log("–î–∞–Ω–Ω—ã–µ, —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏:", groupedByTime);

  // –ü–æ–ª—É—á–∞–µ–º –º–∞—Å—Å–∏–≤ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏
  const timestamps = Object.keys(groupedByTime).sort();

  console.log("–í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏:", timestamps);

  // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å (—Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ), —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º–µ—Ç–æ–∫ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π
  const previousTimestamps = timestamps.length > 1 ? timestamps.slice(0, -1) : [];

  console.log("–ü—Ä–µ–¥—ã–¥—É—â–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ (–∏—Å–∫–ª—é—á–∞—è –ø–æ—Å–ª–µ–¥–Ω—é—é):", previousTimestamps);

  // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏ —Å–ª–æ–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
  clearOldSourcesAndLayers(deviceid);

  // –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Ç–æ—á–µ–∫ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è
  const lineCoordinates = [];

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –ø—Ä–µ–¥—ã–¥—É—â—É—é –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É
  previousTimestamps.forEach(timestamp => {
    const features = groupedByTime[timestamp];

    console.log(`–î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–∏ ${timestamp}:`, features);

    // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –ø–æ–ª–∏–≥–æ–Ω–æ–≤ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
    const polygons = features.map(feature => {
      const stationid = feature.stationid;
      const rssi = feature.rssi;
      const distance = calculateDistance(rssi); // –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ RSSI

      console.log(`–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–æ–ª–∏–≥–æ–Ω–∞ –¥–ª—è —Å—Ç–∞–Ω—Ü–∏–∏ ${stationid} —Å RSSI ${rssi} –∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ–º ${distance}`);

      // –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å—Ç–∞–Ω—Ü–∏–∏
      const station = stations.get(stationid);
      if (!station) {
        console.warn(`–°—Ç–∞–Ω—Ü–∏—è —Å id ${stationid} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
        return null;
      }

      const stationCoordinates = station.getLngLat();

      console.log(`–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å—Ç–∞–Ω—Ü–∏–∏ ${stationid}:`, stationCoordinates);

      // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–∏–≥–æ–Ω —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º turf.js
      const polygon = turf.buffer(turf.point([stationCoordinates.lng, stationCoordinates.lat]), distance, { units: 'meters' });

      return polygon;
    }).filter(polygon => polygon !== null); // –£–±–∏—Ä–∞–µ–º null –∑–Ω–∞—á–µ–Ω–∏—è

    console.log(`–ü–æ–ª–∏–≥–æ–Ω—ã –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–∏ ${timestamp}:`, polygons);

    if (polygons.length === 0) {
      console.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–ª–∏–≥–æ–Ω—ã –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ ${deviceid} –Ω–∞ –º–æ–º–µ–Ω—Ç ${timestamp}`);
      return;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –ø–æ–ª–∏–≥–æ–Ω –Ω–∞ –∫–∞—Ä—Ç—É
    polygons.forEach((polygon, index) => {
      const polygonSourceId = `polygon-source-${deviceid}-${timestamp}-${index}`;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∏—Å—Ç–æ—á–Ω–∏–∫
      if (myMap.getSource(polygonSourceId)) {
        myMap.removeSource(polygonSourceId); // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫
      }

      myMap.addSource(polygonSourceId, {
        type: "geojson",
        data: polygon,
      });

      // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª–∏–≥–æ–Ω–∞
      myMap.addLayer({
        id: `polygon-layer-${deviceid}-${timestamp}-${index}`,
        type: "fill",
        source: polygonSourceId,
        paint: {
          "fill-color": "blue", // –¶–≤–µ—Ç –ø–æ–ª–∏–≥–æ–Ω–∞
          "fill-opacity": 0.3, // –ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –ø–æ–ª–∏–≥–æ–Ω–∞
        },
      });

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å —Å–ª–æ—è (–≤—Å–µ–≥–¥–∞ –≤–∏–¥–∏–º—ã–π)
      myMap.setLayoutProperty(`polygon-layer-${deviceid}-${timestamp}-${index}`, 'visibility', 'none');
    });

    // –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –ø–æ–ª–∏–≥–æ–Ω–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≤–∞—à–µ–π —Ñ—É–Ω–∫—Ü–∏–∏
    const polygonsData = {
      type: "FeatureCollection",
      features: polygons,
    };

    const intersection = findIntersectionOfPolygons(polygonsData);

    if (intersection) {
      // –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—Ç—Ä –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è
      const centroid = turf.centroid(intersection);
      const coordinates = centroid.geometry.coordinates;

      console.log(`–¢–æ—á–∫–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–∏ ${timestamp}:`, coordinates);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç–æ—á–∫–∏ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è
      lineCoordinates.push(coordinates);

      // –°–æ–∑–¥–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–æ—á–∫–∏ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è
      const intersectionSourceId = `intersection-source-${deviceid}-${timestamp}`;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∏—Å—Ç–æ—á–Ω–∏–∫
      if (myMap.getSource(intersectionSourceId)) {
        myMap.removeSource(intersectionSourceId); // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫
      }

      myMap.addSource(intersectionSourceId, {
        type: "geojson",
        data: {
          type: "FeatureCollection",
          features: [
            {
              type: "Feature",
              properties: {
                deviceid: deviceid,
                timestamp: timestamp,
              },
              geometry: {
                type: "Point",
                coordinates: coordinates,
              },
            },
          ],
        },
      });

      // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ—á–∫–∏ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è
      myMap.addLayer({
        id: `intersection-layer-${deviceid}-${timestamp}`,
        type: "circle",
        source: intersectionSourceId,
        paint: {
          "circle-radius": 6, // –û—Å–Ω–æ–≤–Ω–æ–π —Ä–∞–¥–∏—É—Å –∫—Ä—É–≥–∞
          "circle-color": "red", // –¶–≤–µ—Ç –∫—Ä–µ—Å—Ç–∞
          "circle-stroke-color": "black", // –ß–µ—Ä–Ω–∞—è –≥—Ä–∞–Ω–∏—Ü–∞
          "circle-stroke-width": 2, // –¢–æ–ª—â–∏–Ω–∞ –≥—Ä–∞–Ω–∏—Ü—ã
        },
      });

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å —Å–ª–æ—è (–≤—Å–µ–≥–¥–∞ –≤–∏–¥–∏–º—ã–π)
      myMap.setLayoutProperty(`intersection-layer-${deviceid}-${timestamp}`, 'visibility', 'visible');

      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –∫–ª–∏–∫–∞ –¥–ª—è —Ç–æ—á–∫–∏ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è
      myMap.on('click', `intersection-layer-${deviceid}-${timestamp}`, (e) => {
        const feature = e.features[0];
        if (feature && feature.properties && feature.properties.deviceid) {
          const deviceid = feature.properties.deviceid;
          const timestamp = feature.properties.timestamp;

          const formattedTimestamp = formatTimestamp(timestamp);

          // –°–æ–∑–¥–∞–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ deviceid –∏ timestamp
          const popupContent = `
            <strong>Device ID:</strong> ${deviceid}<br>
            <strong>Timestamp:</strong> ${formattedTimestamp}<br>
          `;

          const popup = new maplibregl.Popup()
            .setLngLat(coordinates)
            .setHTML(popupContent)
            .addTo(myMap);
        }
      });
    }
  });

  // –î–æ–±–∞–≤–ª—è–µ–º –ø—É–Ω–∫—Ç–∏—Ä–Ω—É—é –ª–∏–Ω–∏—é –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è
  if (lineCoordinates.length > 1) {
    const lineSourceId = `line-source-${deviceid}`;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∏—Å—Ç–æ—á–Ω–∏–∫
    if (myMap.getSource(lineSourceId)) {
      myMap.removeSource(lineSourceId); // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫
    }

    myMap.addSource(lineSourceId, {
      type: "geojson",
      data: {
        type: "Feature",
        properties: {},
        geometry: {
          type: "LineString",
          coordinates: lineCoordinates,
        },
      },
    });

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–∏–Ω–∏–∏
    myMap.addLayer({
      id: `line-layer-${deviceid}`,
      type: "line",
      source: lineSourceId,
      layout: {
        "line-join": "round",
        "line-cap": "round",
      },
      paint: {
        "line-color": "black",
        "line-width": 2,
        "line-dasharray": [2, 2], // –ü—É–Ω–∫—Ç–∏—Ä–Ω–∞—è –ª–∏–Ω–∏—è
      },
    });
  }
}

function clearOldSourcesAndLayers(deviceid) {
  // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–ª–æ–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º
  myMap.getStyle().layers.forEach(layer => {
    if (layer.id.startsWith(`polygon-layer-${deviceid}`) || 
        layer.id.startsWith(`intersection-layer-${deviceid}`) ||
        layer.id.startsWith(`line-layer-${deviceid}`)) { // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è –ª–∏–Ω–∏–∏
      myMap.removeLayer(layer.id); // –£–¥–∞–ª—è–µ–º —Å–ª–æ–π
    }
  });

  // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º
  const sources = myMap.getStyle().sources;
  if (sources && typeof sources === 'object') {
    Object.keys(sources).forEach(sourceId => {
      if (sourceId.startsWith(`polygon-source-${deviceid}`) || 
          sourceId.startsWith(`intersection-source-${deviceid}`) ||
          sourceId.startsWith(`line-source-${deviceid}`)) { // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è –ª–∏–Ω–∏–∏
        myMap.removeSource(sourceId); // –£–¥–∞–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫
      }
    });
  }
}

function clearTracking(deviceid) {
  // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–ª–æ–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º
  myMap.getStyle().layers.forEach(layer => {
    if (layer.id.startsWith(`intersection-layer-${deviceid}`) ||
        layer.id.startsWith(`line-layer-${deviceid}`)) { // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è –ª–∏–Ω–∏–∏
      myMap.removeLayer(layer.id);
    }
  });

  // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º
  const sources = myMap.getStyle().sources;
  if (sources && typeof sources === 'object') {
    Object.keys(sources).forEach(sourceId => {
      if (sourceId.startsWith(`intersection-source-${deviceid}`) ||
          sourceId.startsWith(`line-source-${deviceid}`)) { // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è –ª–∏–Ω–∏–∏
        myMap.removeSource(sourceId);
      }
    });
  }
}

function getTrackingHistory(deviceid) {
  const now = new Date();
  const oneHourAgo = new Date(now.getTime() - 60 * 60 * 1000); // 1 —á–∞—Å –Ω–∞–∑–∞–¥

  // –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ deviceid –∏ timestamp
  const trackingHistory = geomarkFeatures.filter(feature => {
    const featureTimestamp = new Date(feature.properties.timestamp);
    return feature.properties.deviceid === deviceid && featureTimestamp >= oneHourAgo && featureTimestamp <= now;
  });

  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç GeoJSON
  return trackingHistory.map(feature => ({
    type: "Feature",
    properties: {
      deviceid: feature.properties.deviceid,
      stationid: feature.properties.stationid,
      rssi: feature.properties.rssi,
    },
    geometry: {
      type: "Point",
      coordinates: feature.geometry.coordinates,
    },
  }));
}

function createCustomMarker(imageUrl) {
  const el = document.createElement('div');
  el.style.backgroundImage = `url(${imageUrl})`;
  el.style.width = '36px';
  el.style.height = '40px';
  el.style.backgroundSize = 'cover';
  el.style.cursor = 'pointer';
  return el;
}

function animatePulsingCircle(layerId, color) {
  const duration = 3000; // –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ü–∏–∫–ª–∞ –∞–Ω–∏–º–∞—Ü–∏–∏ (3 —Å–µ–∫—É–Ω–¥—ã)
  const t = (performance.now() % duration) / duration;

  // –†–∞–¥–∏—É—Å –ø—É–ª—å—Å–∏—Ä—É—é—â–µ–π –æ–±–ª–∞—Å—Ç–∏
  const minRadius = 1; // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–¥–∏—É—Å
  const maxRadius = 20; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–¥–∏—É—Å
  const radius = minRadius + (maxRadius - minRadius) * Math.abs(Math.sin(t * Math.PI * 2)); // –†–∞–¥–∏—É—Å –∫–æ–ª–µ–±–ª–µ—Ç—Å—è –æ—Ç minRadius –¥–æ maxRadius

  // –ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –ø—É–ª—å—Å–∏—Ä—É—é—â–µ–π –æ–±–ª–∞—Å—Ç–∏
  let opacity = 0.5 * (1 - t); // –ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è –æ—Ç 0.5 –¥–æ 0

  // –ï—Å–ª–∏ —Ä–∞–¥–∏—É—Å –¥–æ—Å—Ç–∏–≥ –º–∞–∫—Å–∏–º—É–º–∞, –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è 0
  if (radius >= maxRadius) {
    opacity = 0;
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–ª–æ–π –ø–µ—Ä–µ–¥ –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º —Å—Ç–∏–ª—è
  if (myMap.getLayer(layerId)) {
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤–æ–π—Å—Ç–≤–∞ —Å–ª–æ—è
    myMap.setPaintProperty(layerId, "circle-radius", radius);
    myMap.setPaintProperty(layerId, "circle-opacity", opacity);
  }

  // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
  requestAnimationFrame(() => animatePulsingCircle(layerId, color));
}

myMap.on("load", () => {

  // –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª–∏–≥–æ–Ω–∞
  myMap.addSource("polygon-source", {
    type: "geojson",
    data: area,
  });

  // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª–∏–≥–æ–Ω–∞
  myMap.addLayer({
    id: "polygon-layer",
    type: "fill", // –¢–∏–ø —Å–ª–æ—è –¥–ª—è –∑–∞–ª–∏–≤–∫–∏ –ø–æ–ª–∏–≥–æ–Ω–∞
    source: "polygon-source",
    paint: {
      "fill-color": "#0000FF", // –¶–≤–µ—Ç –∑–∞–ª–∏–≤–∫–∏
      "fill-opacity": 0.3, // –ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –∑–∞–ª–∏–≤–∫–∏
    },
  });

  // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥—Ä–∞–Ω–∏—Ü—ã –ø–æ–ª–∏–≥–æ–Ω–∞
  myMap.addLayer({
    id: "polygon-outline-layer",
    type: "line", // –¢–∏–ø —Å–ª–æ—è –¥–ª—è –≥—Ä–∞–Ω–∏—Ü—ã
    source: "polygon-source",
    paint: {
      "line-color": "#FFFFFF", // –¶–≤–µ—Ç –≥—Ä–∞–Ω–∏—Ü—ã
      "line-width": 2, // –¢–æ–ª—â–∏–Ω–∞ –≥—Ä–∞–Ω–∏—Ü—ã
    },
  });
  
  const minLon = 48.704023; // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–æ–ª–≥–æ—Ç–∞
  const maxLon = 48.781786; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–æ–ª–≥–æ—Ç–∞
  const minLat = 55.736341;  // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–æ—Ç–∞
  const maxLat = 55.766193;  // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–æ—Ç–∞

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –≤–∞—à–µ–π –æ–±–ª–∞—Å—Ç–∏
  const bounds = [minLon, minLat, maxLon, maxLat];

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã –∫–∞—Ä—Ç—ã
  myMap.setMaxBounds(bounds);

  // –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö –∏–∑ OpenStreetMap
  myMap.addSource('osm-buildings', {
    type: 'vector',
    url: 'https://api.maptiler.com/tiles/v3/tiles.json?key=TIRssdxNyhmmsolYLLGY'
});

// –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–π –¥–ª—è 3D-–∑–¥–∞–Ω–∏–π
myMap.addLayer({
    id: '3d-buildings',
    type: 'fill-extrusion',
    source: 'osm-buildings',
    'source-layer': 'building', // –£–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–æ–π —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –∑–¥–∞–Ω–∏—è—Ö
    paint: {
        'fill-extrusion-color': '#aaa', // –¶–≤–µ—Ç –∑–¥–∞–Ω–∏–π
        'fill-extrusion-height': ['get', 'render_height'], // –í—ã—Å–æ—Ç–∞ –∑–¥–∞–Ω–∏–π
        'fill-extrusion-base': ['get', 'render_min_height'], // –ë–∞–∑–æ–≤–∞—è –≤—ã—Å–æ—Ç–∞
        'fill-extrusion-opacity': 0.6 // –ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
    },
    filter: [
      'all',
      ['has', 'render_height'], // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª–µ render_height —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      ['has', 'render_min_height'], // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª–µ render_min_height —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      ['==', '$type', 'Polygon'], // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–±—ä–µ–∫—Ç—ã —è–≤–ª—è—é—Ç—Å—è –ø–æ–ª–∏–≥–æ–Ω–∞–º–∏     
    ]
});
  
  // –°–æ–∑–¥–∞–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–ª—è station
  myMap.addSource("stations", {
    type: "geojson",
    data: {
      type: "FeatureCollection",
      features: [],
    },
  });

    myMap.addLayer({
      id: 'stations-layer',
      type: 'symbol',
      source: 'stations',
      layout: {
        'icon-image': 'custom-marker', // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        'icon-size': 1 // –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–ø–æ –∂–µ–ª–∞–Ω–∏—é)
      }
    });

  // –°–æ–∑–¥–∞–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–ª—è –æ–∫—Ä—É–∂–Ω–æ—Å—Ç–µ–π
  myMap.addSource("circles", {
    type: "geojson",
    data: {
      type: "FeatureCollection",
      features: [],
    },
  });

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ—è –¥–ª—è –æ–∫—Ä—É–∂–Ω–æ—Å—Ç–µ–π
  myMap.addLayer({
    id: "circles-layer",
    type: "fill",
    source: "circles",
    paint: {
      "fill-color": ["get", "color"],
      "fill-opacity": 0.3,
    },
  });

  // –°–æ–∑–¥–∞–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–ª—è geomarks
  myMap.addSource("geomarks", {
    type: "geojson",
    data: {
      type: "FeatureCollection",
      features: [],
    },
  });

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ—è –¥–ª—è geomarks
  myMap.addLayer({
    id: "geomarks-layer",
    type: "symbol",
    source: "geomarks",
    layout: {
      "icon-image": "marker-15", // –ü—Ä–∏–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–∞—Ä–∫–µ—Ä–∞
      "icon-size": 1,
    },
  });

  // –°–æ–∑–¥–∞–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–ª—è –ø–æ–ª–∏–≥–æ–Ω–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è
  myMap.addSource("intersection-circle", {
    type: "geojson",
    data: {
      type: "FeatureCollection",
      features: [],
    },
  });

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ—è –¥–ª—è –ø–æ–ª–∏–≥–æ–Ω–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è
  myMap.addLayer({
    id: "intersection-circle-layer",
    type: "fill",
    source: "intersection-circle",
    paint: {
      "fill-color": ["get", "color"],
      "fill-opacity": 0.5,
    },
  });

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª–∏–≥–æ–Ω–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è
  intersectionCircleSource = myMap.getSource("intersection-circle");

  // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ª–æ—è —Å –∫—Ä—É–≥–∞–º–∏
  myMap.setLayoutProperty("circles-layer", "visibility", "none");


  // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket
  const ws = new WebSocket('ws://localhost:3000');

  ws.onopen = () => {
    console.log('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ WebSocket —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
  };

  ws.onmessage = (event) => {
    const data = JSON.parse(event.data);
    console.log('–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ:', data); // –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

    if (data.type === 'stations') {
      handleStationsData(data.data);
    } else if (data.type === 'geomarks') {
      handleGeomarksData(data.data);
    }
  };

  ws.onerror = (error) => {
    console.error('–û—à–∏–±–∫–∞ WebSocket:', error);
  };

  ws.onclose = (event) => {
    console.log('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ WebSocket –∑–∞–∫—Ä—ã—Ç–æ:', event);
  };

  // –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
  setInterval(() => {
    console.clear();
  }, 60000); // 60000 –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥ = 1 –º–∏–Ω—É—Ç–∞
});

function handleStationsData(data) {
  const stationFeatures = data.map((row) => {
    const longitude = parseFloat(row.longitude);
    const latitude = parseFloat(row.latitude);

    return {
      type: "Feature",
      properties: {
        stationid: row.stationid,
        buildingHeight: row.buildingheight, // –í—ã—Å–æ—Ç–∞ –∑–¥–∞–Ω–∏—è
      },
      geometry: {
        type: "Point",
        coordinates: [longitude, latitude],
      },
    };
  }).filter(feature => feature !== null); // –£–¥–∞–ª—è–µ–º null –∑–Ω–∞—á–µ–Ω–∏—è

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–æ–≤ –¥–ª—è —Å—Ç–∞–Ω—Ü–∏–π
  stationFeatures.forEach((feature) => {
    const stationid = feature.properties.stationid;
    const coordinates = feature.geometry.coordinates;
    const buildingHeight = feature.properties.buildingHeight;

    let marker = stations.get(stationid);

    if (!marker) {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –º–∞—Ä–∫–µ—Ä
      const customMarkerElement = createCustomMarker('/images/stationMarker.png');
      if (!customMarkerElement) {
        console.error(`–û—à–∏–±–∫–∞: –º–∞—Ä–∫–µ—Ä –¥–ª—è —Å—Ç–∞–Ω—Ü–∏–∏ ${stationid} –Ω–µ —Å–æ–∑–¥–∞–Ω`);
        return;
      }

      marker = new maplibregl.Marker({
        element: customMarkerElement,
      });

      // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä –Ω–∞ –∫–∞—Ä—Ç—É
      marker.setLngLat(coordinates)
        .setPopup(new maplibregl.Popup().setHTML(`
          <strong>ID:</strong> ${feature.properties.stationid}<br>
        `))
        .addTo(myMap);

      stations.set(stationid, marker);
    } else {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–∞—Ä–∫–µ—Ä
      marker.setLngLat(coordinates);
    }
  });
}

function handleGeomarksData(data) {
  allServerData = data;
  
  // –û—á–∏—â–∞–µ–º rssiData –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  rssiData.clear();

  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ deviceid
  const groupedData = data.reduce((acc, row) => {
    const deviceid = row.deviceid;
    if (!acc[deviceid]) {
      acc[deviceid] = [];
    }
    acc[deviceid].push(row);
    return acc;
  }, {});

  // –î–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤—ã–±–∏—Ä–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º timestamp
  const latestData = Object.values(groupedData).flatMap((deviceData) => {
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ –ø–æ—Ä—è–¥–∫–µ —É–±—ã–≤–∞–Ω–∏—è
    deviceData.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π timestamp –¥–ª—è —ç—Ç–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    const latestTimestamp = deviceData[0].timestamp;

    // –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–ø–∏—Å–∏, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ, —É –∫–æ—Ç–æ—Ä—ã—Ö timestamp —Ä–∞–≤–µ–Ω –ø–æ—Å–ª–µ–¥–Ω–µ–º—É
    return deviceData.filter(row => row.timestamp === latestTimestamp);
  });

  const geomarkFeatures = latestData.map((row) => {
    const stationid = row.stationid;
    const deviceid = row.deviceid;
    const rssi = row.rssi;

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º rssi –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç–∞–Ω—Ü–∏–∏ –≤ rssiData
    rssiData.set(stationid, rssi);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ
    if (!deviceList.has(deviceid)) {
      deviceList.add(deviceid);
      deviceFlags[deviceid] = true; // –ü–æ–º–µ—á–∞–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∫–∞–∫ –Ω–æ–≤–æ–µ
      checkboxStates[deviceid] = false; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ–∫–±–æ–∫—Å–∞ –≤ false
    }

    return {
      type: "Feature",
      properties: {
        stationid: row.stationid,
        deviceid: row.deviceid,
        data: row.data,
        timestamp: row.timestamp,
        rssi: rssi,
        packageid: row.packageid,
        color: getDeviceColor(row.deviceid)
      },
      geometry: {
        type: "Point",
        coordinates: [0, 0], // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –±—É–¥—É—Ç –æ–±–Ω–æ–≤–ª–µ–Ω—ã –ø–æ–∑–∂–µ
      },
    };
  });

  // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
  updateDeviceList();

  // –û–±–Ω–æ–≤–ª—è–µ–º –æ–∫—Ä—É–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —Å—Ç–∞–Ω—Ü–∏–π
  updatePolygonsForStations(geomarkFeatures);

  // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
  updateTotalDevicesCount();
}

function findIntersectionOfPolygons(polygonsData) {
  if (polygonsData.features.length < 2) {
    console.warn('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–ª–∏–≥–æ–Ω–æ–≤ –¥–ª—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è');
    return null;
  }

  let maxIntersection = null;
  let maxCount = 0;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –∫–∞–∂–¥–æ–π –ø–∞—Ä—ã –ø–æ–ª–∏–≥–æ–Ω–æ–≤
  for (let i = 0; i < polygonsData.features.length; i++) {
    let intersection = polygonsData.features[i];
    let count = 1;

    for (let j = 0; j < polygonsData.features.length; j++) {
      if (i !== j) {
        const poly1 = intersection;
        const poly2 = polygonsData.features[j];
        const newIntersection = turf.intersect(turf.featureCollection([poly1, poly2]));

        if (newIntersection) {
          intersection = newIntersection;
          count++;
        }
      }
    }

    if (count > maxCount) {
      maxCount = count;
      maxIntersection = intersection;
    }
  }

  if (!maxIntersection) {
    console.warn('–ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –º–µ–∂–¥—É –ø–æ–ª–∏–≥–æ–Ω–∞–º–∏');
    return null;
  }

  return maxIntersection;
}

function updatePolygonsForStations(geomarkFeatures) {
  const polygonsSource = myMap.getSource("circles");
  let polygonsData = polygonsSource.getData();

  // –ï—Å–ª–∏ polygonsData –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –µ–≥–æ –∫–∞–∫ –ø—É—Å—Ç–æ–π FeatureCollection
  if (!polygonsData || polygonsData.type !== "FeatureCollection") {
    polygonsData = {
      type: "FeatureCollection",
      features: [],
    };
  }

  // –°–æ–∑–¥–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª–∏–≥–æ–Ω–æ–≤
  const newPolygons = new Set();

  geomarkFeatures.forEach((geomarkFeature) => {
    const stationid = geomarkFeature.properties.stationid;
    const deviceid = geomarkFeature.properties.deviceid;
    const color = geomarkFeature.properties.color;
    const timestamp = geomarkFeature.properties.timestamp; // –ü–æ–ª—É—á–∞–µ–º timestamp

    const stationMarker = stations.get(stationid);
    if (!stationMarker) {
      console.warn(`–°—Ç–∞–Ω—Ü–∏—è —Å id ${stationid} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
      return;
    }

    const stationCoordinates = stationMarker.getLngLat();
    const rssi = geomarkFeature.properties.rssi; // –ò—Å–ø–æ–ª—å–∑—É–µ–º RSSI –∏–∑ geomarkFeature

    if (rssi !== undefined) {
      const distance = calculateDistance(rssi); // –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ RSSI

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –º–∞—Å—Å–∏–≤ —á–∏—Å–µ–ª
      const coordinatesArray = [stationCoordinates.lng, stationCoordinates.lat];

      // –£—Å–µ–∫–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å—Ç–∞–Ω—Ü–∏–∏
      const truncatedCoordinates = turf.truncate(turf.point(coordinatesArray), { precision: 6 });

      // –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–∏–≥–æ–Ω–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º turf.js
      const polygon = turf.buffer(truncatedCoordinates, distance, {
        units: 'meters',
      });

      // –£—Å–µ—á–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∫–∞–∂–¥–æ–π —Ç–æ—á–∫–∏ –≤ –ø–æ–ª–∏–≥–æ–Ω–µ
      const truncatedPolygon = turf.truncate(polygon, { precision: 6 });

      truncatedPolygon.properties = {
        stationid: stationid,
        deviceid: deviceid,
        color: color
      };

      // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª–∏–≥–æ–Ω–∞ –Ω–∞ –∫–∞—Ä—Ç—É
      polygonsData.features.push(truncatedPolygon);

      // –î–æ–±–∞–≤–ª—è–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞–Ω—Ü–∏–∏ –∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö –ø–æ–ª–∏–≥–æ–Ω–æ–≤
      newPolygons.add(`${stationid}-${deviceid}`);

      // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª–∏–≥–æ–Ω–∞
      const circleSourceId = `circle-source-${deviceid}-${stationid}`;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª–∏–≥–æ–Ω–∞
      if (!myMap.getSource(circleSourceId)) {
        // –ï—Å–ª–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö
        myMap.addSource(circleSourceId, {
          type: "geojson",
          data: {
            type: "FeatureCollection",
            features: [],
          },
        });

        // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª–∏–≥–æ–Ω–∞
        const layerId = `circles-layer-${deviceid}-${stationid}`;
        myMap.addLayer({
          id: layerId,
          type: "fill",
          source: circleSourceId,
          paint: {
            "fill-color": color,
            "fill-opacity": 0.3,
          },
          layout: {
            visibility: 'none', // –í–∏–¥–∏–º–æ—Å—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã–∫–ª—é—á–µ–Ω–∞
          },
        });

        // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–π –≤ –æ–±—ä–µ–∫—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏
        layerVisibilityStates[layerId] = false;

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ–∫–±–æ–∫—Å–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤ false
        checkboxStates[deviceid] = false;
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∏—Å—Ç–æ—á–Ω–∏–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª–∏–≥–æ–Ω–∞
      myMap.getSource(circleSourceId).setData({
        type: "FeatureCollection",
        features: [truncatedPolygon],
      });
    } else {
      console.warn(`RSSI –¥–ª—è —Å—Ç–∞–Ω—Ü–∏–∏ ${stationid} –∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ ${deviceid} –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ`);
    }
  });

  // –£–¥–∞–ª—è–µ–º –ø–æ–ª–∏–≥–æ–Ω—ã, –∫–æ—Ç–æ—Ä—ã–µ –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω—ã
  polygonsData.features = polygonsData.features.filter((feature) => {
    const polygonKey = `${feature.properties.stationid}-${feature.properties.deviceid}`;
    if (!newPolygons.has(polygonKey)) {
      // –£–¥–∞–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö –∏ —Å–ª–æ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª–∏–≥–æ–Ω–∞
      const circleSourceId = `circle-source-${feature.properties.deviceid}-${feature.properties.stationid}`;
      const layerId = `circles-layer-${feature.properties.deviceid}-${feature.properties.stationid}`;
      if (myMap.getSource(circleSourceId)) {
        myMap.removeLayer(layerId);
        myMap.removeSource(circleSourceId);
        delete layerVisibilityStates[layerId]; // –£–¥–∞–ª—è–µ–º —Å–ª–æ–π –∏–∑ –æ–±—ä–µ–∫—Ç–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏
      }
      return false;
    }
    return true;
  });

  // –û–±–Ω–æ–≤–ª—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª–∏–≥–æ–Ω–æ–≤
  existingCircles = newPolygons;

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –∏—Å—Ç–æ—á–Ω–∏–∫–µ polygons
  polygonsSource.setData(polygonsData);

  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª–∏–≥–æ–Ω–æ–≤
  console.log(`–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–∏–≥–æ–Ω–æ–≤: ${polygonsData.features.length}`);

  // –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –ø–æ–ª–∏–≥–æ–Ω–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
  const deviceIntersections = new Map();

  geomarkFeatures.forEach((geomarkFeature) => {
    const deviceid = geomarkFeature.properties.deviceid;
    const color = geomarkFeature.properties.color;
    const timestamp = geomarkFeature.properties.timestamp; // –ü–æ–ª—É—á–∞–µ–º timestamp

    // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ–ª–∏–≥–æ–Ω—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    const devicePolygons = polygonsData.features.filter(feature => feature.properties.deviceid === deviceid);

    if (devicePolygons.length > 1) {
      // –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –ø–æ–ª–∏–≥–æ–Ω–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
      const intersection = findIntersectionOfPolygons({
        type: "FeatureCollection",
        features: devicePolygons
      });

      if (intersection) {
        deviceIntersections.set(deviceid, { intersection, color, timestamp }); // –î–æ–±–∞–≤–ª—è–µ–º timestamp
      }
    }
  });

  // –£–¥–∞–ª—è–µ–º –º–µ—Ç–∫–∏ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω—ã
  intersectionMarkers.forEach((marker, deviceid) => {
    if (!deviceIntersections.has(deviceid)) {
      marker.remove();
      intersectionMarkers.delete(deviceid);
    }
  });

  // –°—Ç–∞–≤–∏–º –º–µ—Ç–∫—É –≤ —Ç–æ—á–∫–µ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
  deviceIntersections.forEach(({ intersection, color, timestamp }, deviceid) => {
    placeMarkerAtIntersection(intersection, deviceid, color, timestamp); // –ü–µ—Ä–µ–¥–∞–µ–º timestamp
  });

  console.log("–ö–æ–Ω–µ—Ü –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª–∏–≥–æ–Ω–æ–≤");
}

function placeMarkerAtIntersection(intersection, deviceid, color, timestamp) {
  if (!intersection) return;

  // –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ü–µ–Ω—Ç—Ä–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è
  const centroid = turf.centroid(intersection);
  const coordinates = centroid.geometry.coordinates;

  // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É–ª—å—Å–∏—Ä—É—é—â–µ–π —Ç–æ—á–∫–∏
  const pulsingSourceId = `pulsing-source-${deviceid}`;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç—Ç–æ–π –ø—É–ª—å—Å–∏—Ä—É—é—â–µ–π —Ç–æ—á–∫–∏
  if (!myMap.getSource(pulsingSourceId)) {
    // –ï—Å–ª–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö
    myMap.addSource(pulsingSourceId, {
      type: "geojson",
      data: {
        type: "FeatureCollection",
        features: [
          {
            type: "Feature",
            properties: {
              deviceid: deviceid,
              color: color,
              timestamp: timestamp, // –î–æ–±–∞–≤–ª—è–µ–º timestamp –≤ —Å–≤–æ–π—Å—Ç–≤–∞
            },
            geometry: {
              type: "Point",
              coordinates: coordinates,
            },
          },
        ],
      },
    });

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–π –¥–ª—è —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–≥–æ –∫—Ä—É–≥–∞ (—Å—Ç–∞—Ç–∏—á–Ω—ã–π)
    const innerCircleLayerId = `inner-circle-layer-${deviceid}`;
    myMap.addLayer({
      id: innerCircleLayerId,
      type: "circle",
      source: pulsingSourceId,
      paint: {
        "circle-color": color, // –¶–≤–µ—Ç —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–≥–æ –∫—Ä—É–≥–∞
        "circle-radius": 5, // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–¥–∏—É—Å —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–≥–æ –∫—Ä—É–≥–∞
        "circle-opacity": 1, // –ü–æ–ª–Ω–∞—è –Ω–µ–ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
        "circle-stroke-color": "white", // –¶–≤–µ—Ç –æ–±–≤–æ–¥–∫–∏ (–±–µ–ª—ã–π)
        "circle-stroke-width": 2, // –¢–æ–ª—â–∏–Ω–∞ –æ–±–≤–æ–¥–∫–∏
        "circle-stroke-opacity": 1, // –ù–µ–ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –æ–±–≤–æ–¥–∫–∏
      },
    });

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–π –¥–ª—è –ø—É–ª—å—Å–∏—Ä—É—é—â–µ–π –æ–±–ª–∞—Å—Ç–∏ (–∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)
    const pulsingLayerId = `pulsing-layer-${deviceid}`;
    myMap.addLayer({
      id: pulsingLayerId,
      type: "circle",
      source: pulsingSourceId,
      paint: {
        "circle-color": color, // –¶–≤–µ—Ç –ø—É–ª—å—Å–∏—Ä—É—é—â–µ–π –æ–±–ª–∞—Å—Ç–∏
        "circle-radius": 1, // –ù–∞—á–∞–ª—å–Ω—ã–π —Ä–∞–¥–∏—É—Å –ø—É–ª—å—Å–∏—Ä—É—é—â–µ–π –æ–±–ª–∞—Å—Ç–∏
        "circle-opacity": 0.5, // –ù–∞—á–∞–ª—å–Ω–∞—è –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
      },
    });

    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø—É–ª—å—Å–∏—Ä—É—é—â–µ–π —Ç–æ—á–∫–∏
    animatePulsingCircle(pulsingLayerId, color);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É–ª—å—Å–∏—Ä—É—é—â–µ–π —Ç–æ—á–∫–∏
    deviceCircles.set(deviceid, pulsingSourceId);

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –∫–ª–∏–∫–∞ –¥–ª—è –ø—É–ª—å—Å–∏—Ä—É—é—â–µ–π —Ç–æ—á–∫–∏
    myMap.on('click', pulsingLayerId, (e) => {
      const feature = e.features[0]; // –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –∫–ª–∏–∫–Ω—É–ª–∏
      if (feature && feature.properties && feature.properties.deviceid) {
        const deviceid = feature.properties.deviceid;
        const timestamp = feature.properties.timestamp; // –ü–æ–ª—É—á–∞–µ–º timestamp –∏–∑ —Å–≤–æ–π—Å—Ç–≤
        const formattedTimestamp = formatTimestamp(timestamp);

        // –°–æ–∑–¥–∞–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ deviceid –∏ timestamp
        const popupContent = `
          <strong>Device ID:</strong> ${deviceid}<br>
          <strong>Timestamp:</strong> ${formattedTimestamp}<br>
        `;

        const popup = new maplibregl.Popup()
          .setLngLat(coordinates)
          .setHTML(popupContent)
          .addTo(myMap);
      }
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –Ω–∞–≤–µ–¥–µ–Ω–∏—è –º—ã—à–∏ –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –ø—É–ª—å—Å–∏—Ä—É—é—â–µ–π —Ç–æ—á–∫–∏
    myMap.on('mouseenter', pulsingLayerId, () => {
      myMap.getCanvas().style.cursor = 'pointer'; // –ú–µ–Ω—è–µ–º –∫—É—Ä—Å–æ—Ä –Ω–∞ —É–∫–∞–∑–∞—Ç–µ–ª—å
    });

    myMap.on('mouseleave', pulsingLayerId, () => {
      myMap.getCanvas().style.cursor = ''; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—É—Ä—Å–æ—Ä –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    });
  } else {
    // –ï—Å–ª–∏ –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    myMap.getSource(pulsingSourceId).setData({
      type: "FeatureCollection",
      features: [
        {
          type: "Feature",
          properties: {
            deviceid: deviceid,
            color: color,
            timestamp: timestamp, // –î–æ–±–∞–≤–ª—è–µ–º timestamp –≤ —Å–≤–æ–π—Å—Ç–≤–∞
          },
          geometry: {
            type: "Point",
            coordinates: coordinates,
          },
        },
      ],
    });
  }
}